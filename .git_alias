
##https://github.com/willmcclellan/dotfiles/blob/master/zsh/aliases#L9
# git alises
alias gs="git status"
alias ga="git add"
alias gaa="git aa"
alias gap="git add -p"
alias gci="git ci"
alias gcm="git ci -m"
alias gco="git co"
alias gcob="git co -b"
alias gd="git diff"
alias gds="git diff --staged"
alias ghp="git checkout gh-pages && git rebase master && git push origin gh-pages && git checkout master"
alias gl="git log --graph --oneline --decorate --date=relative --all"
alias gpo="git pull origin"
alias gpom="git pom"
alias gpu="git push"
alias grm="git rm"
alias grh="git reset HEAD"
alias gum="gco master && gpo"
alias gpuhe="git push heroku master"
alias gput="git push --tags"
alias gpuh="gpu && gput && gpuhe"
alias gpl="git pull"
alias gt="git tag"
alias gnrt="git-new-remote-tracking"
alias hpr="hub pull-request"
alias hb="hub browse"
alias gmbic="git-merge-branch-into-current"
alias gmi="git-merge-into"
alias gdmerged="git branch --merged master | grep -v \"\* master\" | xargs -n 1 git branch -d"
alias gpr="git pull-request"

function gup
{
  # subshell for `set -e` and `trap`
  (
    set -e # fail immediately if there's a problem

    # use `git-up` if installed
    if type git-up > /dev/null 2>&1
    then
      exec git-up
    fi

    # fetch upstream changes
    git fetch

    BRANCH=$(git symbolic-ref -q HEAD)
    BRANCH=${BRANCH##refs/heads/}
    BRANCH=${BRANCH:-HEAD}

    if [ -z "$(git config branch.$BRANCH.remote)" -o -z "$(git config branch.$BRANCH.merge)" ]
    then
      echo "\"$BRANCH\" is not a tracking branch." >&2
      exit 1
    fi

    # create a temp file for capturing command output
    TEMPFILE="`mktemp -t gup.XXXXXX`"
    trap '{ rm -f "$TEMPFILE"; }' EXIT

    # if we're behind upstream, we need to update
    if git status | grep "# Your branch" > "$TEMPFILE"
    then

      # extract tracking branch from message
      UPSTREAM=$(cat "$TEMPFILE" | cut -d "'" -f 2)
      if [ -z "$UPSTREAM" ]
      then
        echo Could not detect upstream branch >&2
        exit 1
      fi

      # can we fast-forward?
      CAN_FF=1
      grep -q "can be fast-forwarded" "$TEMPFILE" || CAN_FF=0

      # stash any uncommitted changes
      git stash | tee "$TEMPFILE"
      [ "${PIPESTATUS[0]}" -eq 0 ] || exit 1

      # take note if anything was stashed
      HAVE_STASH=0
      grep -q "No local changes" "$TEMPFILE" || HAVE_STASH=1

      if [ "$CAN_FF" -ne 0 ]
      then
        # if nothing has changed locally, just fast foward.
        git merge --ff "$UPSTREAM"
      else
        # rebase our changes on top of upstream, but keep any merges
        git rebase -p "$UPSTREAM"
      fi

      # restore any stashed changes
      if [ "$HAVE_STASH" -ne 0 ]
      then
        git stash pop
      fi

    fi

  )
}